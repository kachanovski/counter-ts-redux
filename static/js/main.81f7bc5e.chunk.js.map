{"version":3,"sources":["serviceWorker.ts","redux/counterReducer.tsx","redux/store.ts","Forms/InputForm.tsx","Forms/ButtonForm.tsx","Components/Settings.tsx","Forms/validators.tsx","Forms/Input.tsx","Forms/Button.tsx","Components/Counter.tsx","Components/EmptyComponent.tsx","App-redux.tsx","index.tsx","Forms/Input.module.css","Forms/Button.module.css"],"names":["Boolean","window","location","hostname","match","initialState","start","max","count","isHide","disableButton","type","reducers","combineReducers","counter","state","action","form","formReducer","store","createStore","InputForm","input","meta","props","touched","error","className","style","tooltip","inputForm","ButtonForm","neonButton","title","SettingsForm","reduxForm","validate","values","errors","startValueParse","parseInt","maxValueParse","onChange","dispatch","previousValues","useSelector","onSubmit","handleSubmit","Field","name","component","disabled","invalid","Input","readOnly","Button","Counter","value","disableButtonIncrement","onClick","onClickIncrement","disableButtonReset","onClickReset","EmptyComponent","AppRedux","useDispatch","formData","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.81f7bc5e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type ActionType =\r\n    ReturnType<typeof increment> |\r\n    ReturnType<typeof resetStartValue> |\r\n    ReturnType<typeof setStartValue> |\r\n    ReturnType<typeof disableButton> |\r\n    ReturnType<typeof setMaxValue>\r\n\r\nexport type CounterType = {\r\n    start: number | null\r\n    max: number\r\n    count: number\r\n    isHide: boolean\r\n}\r\n\r\nconst INCREMENT = 'INCREMENT'\r\nconst RESET_START_VALUE = 'RESET_START_VALUE'\r\nconst SET_START_VALUE = 'SET_START_VALUE'\r\nconst SET_MAX_VALUE = 'SET_MAX_VALUE'\r\nconst DISABLE_BUTTON = 'DISABLE_BUTTON'\r\n\r\nlet initialState: CounterType = {\r\n    start: null,\r\n    max: 0,\r\n    count: 0,\r\n    isHide: false\r\n}\r\n\r\nexport const counterReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case INCREMENT:\r\n            if (state.count < state.max) {\r\n                return {\r\n                    ...state,\r\n                    count: state.count + 1\r\n                }\r\n            } else return {\r\n                ...state,\r\n                start: state.start\r\n            }\r\n\r\n        case RESET_START_VALUE:\r\n            return {\r\n                ...state,\r\n                count: state.start\r\n            }\r\n        case SET_START_VALUE:\r\n            return {\r\n                ...state,\r\n                start: action.start,\r\n                count: action.start\r\n            }\r\n        case SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                max: action.max\r\n            }\r\n        case DISABLE_BUTTON:\r\n            return {\r\n                ...state,\r\n                isHide: action.isHide\r\n            }\r\n    }\r\n    return state\r\n}\r\n\r\nexport const increment = () => {\r\n    return {type: \"INCREMENT\"} as const\r\n}\r\nexport const resetStartValue = () => {\r\n    return {type: \"RESET_START_VALUE\"} as const\r\n}\r\nexport const setStartValue = (start: any) => {\r\n    return {type: \"SET_START_VALUE\", start} as const\r\n}\r\nexport const setMaxValue = (max: any) => {\r\n    return {type: \"SET_MAX_VALUE\", max} as const\r\n}\r\nexport const disableButton = (isHide: boolean) => {\r\n    return {type: \"DISABLE_BUTTON\", isHide} as const\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst reducers = combineReducers({\r\n    counter:counterReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport type StoreReduxType = ReturnType<typeof reducers>\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport style from './Input.module.css'\r\nimport {WrappedFieldProps} from \"redux-form\";\r\n\r\nexport const InputForm = ({input, meta, ...props}: WrappedFieldProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                 <span>\r\n                     {meta.touched && meta.error\r\n                        ? <span className={style.tooltip}>{meta.error}</span>\r\n                        : \"\"}\r\n            </span>\r\n            </div>\r\n            <div>\r\n                <input   className={style.inputForm} {...input} {...props}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nonChange={e => {\r\ninput.onChange()\r\nupdateName(e.currentTarget.value)\r\n}}\r\n*/\r\n\r\n","import React from \"react\";\r\nimport style from \"./Button.module.css\";\r\n\r\ntype ButtonFormPropsType = {\r\n    title: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const ButtonForm = ( props: ButtonFormPropsType) => {\r\n    return (\r\n        <div >\r\n            <button className={style.neonButton}{...props}>{props.title}</button>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport {InputForm} from \"../Forms/InputForm\";\r\nimport React from \"react\";\r\nimport '../App.css';\r\nimport {validate, ValueStateType} from \"../Forms/validators\";\r\nimport {ButtonForm} from \"../Forms/ButtonForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StoreReduxType} from \"../redux/store\";\r\nimport {CounterType, disableButton} from \"../redux/counterReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype SettingsProps = {\r\n    handleSubmit: (formData:any) => void   /////????\r\n    invalid: boolean\r\n}\r\n\r\nconst Settings = (props: SettingsProps) => {\r\n\r\n    const counter = useSelector<StoreReduxType, CounterType>(state => state.counter)\r\n\r\n    return (\r\n        <form className={\"container\"} onSubmit={props.handleSubmit}>\r\n            <span className={'text'}>START</span>\r\n            <Field name='start' component={InputForm} type={'number'}/>\r\n\r\n            <span className={'text'}>MAX</span>\r\n            <Field name='max' component={InputForm} type={'number'}/>\r\n            {counter.isHide ? <div className={\"text\"}>CHANGE VALUES AND CLICK SET SETTINGS</div> :\r\n                <ButtonForm disabled={props.invalid} title={\"SET SETTINGS\"}/>}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SettingsForm = reduxForm({\r\n    form: 'settingsForm',\r\n    validate: validate,\r\n    onChange(values: Partial<ValueStateType>, dispatch: Dispatch, previousValues: Partial<ValueStateType>) {\r\n        if (values !== previousValues) {\r\n            dispatch(disableButton(false))\r\n        }\r\n    }\r\n})(Settings)","export type ValueStateType = {\r\n    start: string\r\n    max: string\r\n}\r\n\r\nexport const validate = (values: ValueStateType) => {\r\n    const errors= {}  as  ValueStateType\r\n    const startValueParse = parseInt(values.start)\r\n    const maxValueParse = parseInt(values.max)\r\n    if (!startValueParse) {\r\n        errors.start = \"incorrect value\"\r\n    } else if (!maxValueParse) {\r\n        errors.max = \"incorrect value\"\r\n    } else if (startValueParse > maxValueParse) {\r\n        errors.start = 'start value more than max value'\r\n    } else if (startValueParse <= 0) {\r\n        errors.start = 'start values just more than 0'\r\n    } else if (maxValueParse < 0) {\r\n        errors.max = ' max values just more than 0'\r\n    } else if (startValueParse > maxValueParse) {\r\n        errors.start = 'start value more than max value'\r\n    } else if (startValueParse === maxValueParse) {\r\n        errors.max = \"identical values\"\r\n    }\r\n    return errors\r\n}\r\n","import React from \"react\";\r\nimport style from './Input.module.css'\r\n\r\ntype InputPropsType ={\r\n    value: number\r\n    readonly?: boolean\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n    return (\r\n            <div>\r\n                <input readOnly className={style.inputForm} {...props}/>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport style from \"./Button.module.css\";\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    disabled: any  ///???????????\r\n    onClick: () => void\r\n}\r\n\r\nexport const Button = ( props: ButtonPropsType) => {\r\n    return (\r\n        <div >\r\n            <button className={style.neonButton} {...props}>{props.title}</button>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport '../App.css';\r\nimport {Input} from \"../Forms/Input\";\r\nimport { Button } from \"../Forms/Button\";\r\n\r\ntype CounterType = {\r\n    value: number\r\n    disableButtonIncrement: () => void\r\n    disableButtonReset: () => void\r\n    onClickIncrement: () => void\r\n    onClickReset: () => void\r\n}\r\n\r\nexport const Counter = (props: CounterType) => {\r\n    return (\r\n        <div className={\"container\"}>\r\n            <Input value={props.value}/>\r\n            <div>\r\n                <Button disabled={props.disableButtonIncrement()}  onClick={props.onClickIncrement} title={\"COUNT\"}/>\r\n                <Button disabled={props.disableButtonReset()}  onClick={props.onClickReset} title={\"RESET\"}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const EmptyComponent = () => {\r\n    return (\r\n        <div className={\"emptyComponent\"}>CHANGE VALUES AND CLICK SET SETTINGS</div>\r\n    )\r\n}","import React from 'react'\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {StoreReduxType} from './redux/store';\nimport {\n    CounterType,\n    disableButton,\n    increment,\n    resetStartValue,\n    setMaxValue,\n    setStartValue\n} from \"./redux/counterReducer\";\nimport {SettingsForm} from \"./Components/Settings\";\nimport {Counter} from \"./Components/Counter\";\nimport {EmptyComponent} from \"./Components/EmptyComponent\";\n\nexport type onSubmitFormType = {\n    max: string\n    start: string\n}\n\nfunction AppRedux() {\n\n    const counter = useSelector<StoreReduxType, CounterType>(state => state.counter)\n    const dispatch = useDispatch()\n\n    const onClickIncrement = () => {\n        dispatch(increment())\n    }\n    const onClickReset = () => {\n        dispatch(resetStartValue())\n    }\n    const disableButtonReset = () => {\n        return counter.start === counter.count;\n    }\n    const disableButtonIncrement = () => {\n        return counter.max === counter.count;\n    }\n\n    let onSubmit = (formData: onSubmitFormType) => {\n        dispatch(setStartValue(parseInt(formData.start)))\n        dispatch(setMaxValue(parseInt(formData.max)))\n        dispatch(disableButton(true))\n    }\n\n    return (\n        <div className={'App'}>\n            <div className={\"box\"}>\n                <SettingsForm onSubmit={onSubmit}/></div>\n            <div className={\"box\"}>\n                {counter.start && counter.isHide\n                    ? <Counter value={counter.count}\n                               disableButtonReset={disableButtonReset}\n                               disableButtonIncrement={disableButtonIncrement}\n                               onClickIncrement={onClickIncrement}\n                               onClickReset={onClickReset}/>\n                    : <EmptyComponent/>} </div>\n\n\n        </div>\n    )\n}\n\nexport default AppRedux\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport AppRedux from \"./App-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppRedux/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"Input_inputForm__2aZ8y\",\"tooltip\":\"Input_tooltip__1jI-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"neonButton\":\"Button_neonButton__3CVST\",\"border-flicker\":\"Button_border-flicker__15yfX\"};"],"sourceRoot":""}